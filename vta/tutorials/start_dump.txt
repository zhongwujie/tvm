[13:43:38] /hpc/home/connect.wzhong679/code/Simulator_sample/tvm/src/script/printer/tir/expr.cc:246: Warning: No TScriptPrinterName attribute for tir.vta.command_handle
[13:43:38] /hpc/home/connect.wzhong679/code/Simulator_sample/tvm/src/script/printer/tir/expr.cc:246: Warning: No TScriptPrinterName attribute for tir.vta.command_handle
[13:43:38] /hpc/home/connect.wzhong679/code/Simulator_sample/tvm/src/script/printer/tir/expr.cc:246: Warning: No TScriptPrinterName attribute for tir.vta.uop_push
[13:43:38] /hpc/home/connect.wzhong679/code/Simulator_sample/tvm/src/script/printer/tir/expr.cc:246: Warning: No TScriptPrinterName attribute for tir.vta.coproc_dep_push
[13:43:38] /hpc/home/connect.wzhong679/code/Simulator_sample/tvm/src/script/printer/tir/expr.cc:246: Warning: No TScriptPrinterName attribute for tir.vta.coproc_dep_pop
[13:43:38] /hpc/home/connect.wzhong679/code/Simulator_sample/tvm/src/script/printer/tir/expr.cc:246: Warning: No TScriptPrinterName attribute for tir.vta.command_handle
[13:43:38] /hpc/home/connect.wzhong679/code/Simulator_sample/tvm/src/script/printer/tir/expr.cc:246: Warning: No TScriptPrinterName attribute for tir.vta.coproc_sync
2024-06-30 13:43:38.428 INFO load_module /tmp/tmpr3xhwfi9/vadd.o
env.TARGET=sim
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1, 64, 1, 16), "int32"), B: T.Buffer((1, 64, 1, 16), "int32"), C: T.Buffer((1, 64, 1, 16), "int8")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        A_buf = T.allocate([1024], "int32", "global")
        B_buf = T.allocate([1024], "int32", "global")
        A_buf_1 = T.Buffer((1024,), "int32", data=A_buf)
        for i1, i3 in T.grid(64, 16):
            cse_var_1: T.int32 = i1 * 16 + i3
            A_1 = T.Buffer((1024,), "int32", data=A.data)
            A_buf_1[cse_var_1] = A_1[cse_var_1]
        B_buf_1 = T.Buffer((1024,), "int32", data=B_buf)
        for i1, i3 in T.grid(64, 16):
            cse_var_2: T.int32 = i1 * 16 + i3
            B_1 = T.Buffer((1024,), "int32", data=B.data)
            B_buf_1[cse_var_2] = B_1[cse_var_2]
        A_buf_2 = T.Buffer((1024,), "int32", data=A_buf)
        for i1, i3 in T.grid(64, 16):
            cse_var_3: T.int32 = i1 * 16 + i3
            A_buf_2[cse_var_3] = A_buf_1[cse_var_3] + B_buf_1[cse_var_3]
        for i1, i3 in T.grid(64, 16):
            cse_var_4: T.int32 = i1 * 16 + i3
            C_1 = T.Buffer((1024,), "int8", data=C.data)
            C_1[cse_var_4] = T.Cast("int8", A_buf_2[cse_var_4])
Test the orignal tvm lower
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1, 64, 1, 16), "int32"), B: T.Buffer((1, 64, 1, 16), "int32"), C: T.Buffer((1, 64, 1, 16), "int8")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        A_buf = T.allocate([2048], "int32", "local.acc_buffer")
        i0 = T.int32()
        A_buf_1 = T.Buffer((1024,), "int32", data=A_buf, scope="local.acc_buffer", align=16)
        with T.attr(T.iter_var(i0, None, "DataPar", ""), "pragma_dma_copy", 1):
            for i1, i3 in T.grid(64, 16):
                cse_var_1: T.int32 = i1 * 16 + i3
                A_1 = T.Buffer((1024,), "int32", data=A.data)
                A_buf_1[cse_var_1] = A_1[cse_var_1]
        i0_1 = T.int32()
        A_buf_2 = T.Buffer((1024,), "int32", data=A_buf, scope="local.acc_buffer", align=16)
        with T.attr(T.iter_var(i0_1, None, "DataPar", ""), "pragma_dma_copy", 1):
            for i1, i3 in T.grid(64, 16):
                cse_var_2: T.int32 = i1 * 16 + i3
                B_1 = T.Buffer((1024,), "int32", data=B.data)
                A_buf_2[cse_var_2 + 1024] = B_1[cse_var_2]
        i0_2 = T.int32()
        A_buf_3 = T.Buffer((1024,), "int32", data=A_buf, scope="local.acc_buffer", align=16)
        with T.attr(T.iter_var(i0_2, None, "DataPar", ""), "pragma_alu", 1):
            for i1, i3 in T.grid(64, 16):
                cse_var_3: T.int32 = i1 * 16 + i3
                A_buf_3[cse_var_3] = A_buf_1[cse_var_3] + A_buf_2[cse_var_3 + 1024]
        i0_3 = T.int32()
        T.attr(T.iter_var(i0_3, None, "DataPar", ""), "pragma_dma_copy", 1)
        for i1, i3 in T.grid(64, 16):
            cse_var_4: T.int32 = i1 * 16 + i3
            C_1 = T.Buffer((1024,), "int8", data=C.data)
            C_1[cse_var_4] = T.Cast("int8", A_buf_3[cse_var_4])
Test the VTA lower
with build config
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1, 64, 1, 16), "int32"), B: T.Buffer((1, 64, 1, 16), "int32"), C: T.Buffer((1, 64, 1, 16), "int8")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        vta = T.int32()
        with T.attr(T.iter_var(vta, None, "ThreadIndex", "vta"), "coproc_scope", 2):
            T.call_extern("int32", "VTALoadBuffer2D", T.tvm_thread_context(T.tir.vta.command_handle()), A.data, 0, 64, 1, 64, 0, 0, 0, 0, 0, 3)
            T.call_extern("int32", "VTALoadBuffer2D", T.tvm_thread_context(T.tir.vta.command_handle()), B.data, 0, 64, 1, 64, 0, 0, 0, 0, 64, 3)
            with T.attr(T.iter_var(vta, None, "ThreadIndex", "vta"), "coproc_uop_scope", "VTAPushALUOp"):
                T.call_extern("int32", "VTAUopLoopBegin", 64, 1, 1, 0)
                T.tir.vta.uop_push(1, 0, 0, 64, 0, 2, 0, 0)
                T.call_extern("int32", "VTAUopLoopEnd")
            T.tir.vta.coproc_dep_push(2, 3)
        with T.attr(T.iter_var(vta, None, "ThreadIndex", "vta"), "coproc_scope", 3):
            T.tir.vta.coproc_dep_pop(2, 3)
            T.call_extern("int32", "VTAStoreBuffer2D", T.tvm_thread_context(T.tir.vta.command_handle()), 0, 4, C.data, 0, 64, 1, 64)
        T.tir.vta.coproc_sync()
temp path: /tmp/tmp_gyujwvn/vadd.o
Successful vector add test!
